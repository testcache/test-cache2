// Code generated by dagger-compiler.  Do not edit.
package org.thoughtcrime.securesms.service;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<WebRtcCallService>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code WebRtcCallService} and its
 * dependencies.
 *
 * Being a {@code Provider<WebRtcCallService>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<WebRtcCallService>} and handling injection
 * of annotated fields.
 */
public final class WebRtcCallService$$InjectAdapter extends Binding<WebRtcCallService>
    implements Provider<WebRtcCallService>, MembersInjector<WebRtcCallService> {
  private Binding<org.thoughtcrime.securesms.dependencies.SignalCommunicationModule.SignalMessageSenderFactory> messageSenderFactory;
  private Binding<org.whispersystems.signalservice.api.SignalServiceAccountManager> accountManager;

  public WebRtcCallService$$InjectAdapter() {
    super("org.thoughtcrime.securesms.service.WebRtcCallService", "members/org.thoughtcrime.securesms.service.WebRtcCallService", NOT_SINGLETON, WebRtcCallService.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    messageSenderFactory = (Binding<org.thoughtcrime.securesms.dependencies.SignalCommunicationModule.SignalMessageSenderFactory>) linker.requestBinding("org.thoughtcrime.securesms.dependencies.SignalCommunicationModule$SignalMessageSenderFactory", WebRtcCallService.class, getClass().getClassLoader());
    accountManager = (Binding<org.whispersystems.signalservice.api.SignalServiceAccountManager>) linker.requestBinding("org.whispersystems.signalservice.api.SignalServiceAccountManager", WebRtcCallService.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(messageSenderFactory);
    injectMembersBindings.add(accountManager);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<WebRtcCallService>}.
   */
  @Override
  public WebRtcCallService get() {
    WebRtcCallService result = new WebRtcCallService();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<WebRtcCallService>}.
   */
  @Override
  public void injectMembers(WebRtcCallService object) {
    object.messageSenderFactory = messageSenderFactory.get();
    object.accountManager = accountManager.get();
  }

}
