// Code generated by dagger-compiler.  Do not edit.
package org.thoughtcrime.securesms.jobs;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;

/**
 * A {@code Binding<GcmRefreshJob>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code GcmRefreshJob} and its
 * dependencies.
 *
 * Being a {@code Provider<GcmRefreshJob>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<GcmRefreshJob>} and handling injection
 * of annotated fields.
 */
public final class GcmRefreshJob$$InjectAdapter extends Binding<GcmRefreshJob>
    implements MembersInjector<GcmRefreshJob> {
  private Binding<org.whispersystems.signalservice.api.SignalServiceAccountManager> textSecureAccountManager;
  private Binding<ContextJob> supertype;

  public GcmRefreshJob$$InjectAdapter() {
    super(null, "members/org.thoughtcrime.securesms.jobs.GcmRefreshJob", NOT_SINGLETON, GcmRefreshJob.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    textSecureAccountManager = (Binding<org.whispersystems.signalservice.api.SignalServiceAccountManager>) linker.requestBinding("org.whispersystems.signalservice.api.SignalServiceAccountManager", GcmRefreshJob.class, getClass().getClassLoader());
    supertype = (Binding<ContextJob>) linker.requestBinding("members/org.thoughtcrime.securesms.jobs.ContextJob", GcmRefreshJob.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(textSecureAccountManager);
    injectMembersBindings.add(supertype);
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<GcmRefreshJob>}.
   */
  @Override
  public void injectMembers(GcmRefreshJob object) {
    object.textSecureAccountManager = textSecureAccountManager.get();
    supertype.injectMembers(object);
  }

}
